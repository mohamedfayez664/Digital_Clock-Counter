
digital_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002508  0000259c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800168  00800168  000026a4  2**0
                  ALLOC
  3 .stab         0000222c  00000000  00000000  000026a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001249  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000082b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000963c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_1>
       8:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_18>
      4c:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e0       	ldi	r30, 0x08	; 8
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 3c 09 	call	0x1278	; 0x1278 <main>
      8a:	0c 94 82 12 	jmp	0x2504	; 0x2504 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DELAY_init>:
#define F_CPU_Pre F_CPU_64
#endif


/////////////////////////
void DELAY_init (){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	////timer2 init
	TCNT2=0;              //initial
     e36:	e4 e4       	ldi	r30, 0x44	; 68
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
	OCR2 =125 ;           //initial compare value 
     e3c:	e3 e4       	ldi	r30, 0x43	; 67
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8d e7       	ldi	r24, 0x7D	; 125
     e42:	80 83       	st	Z, r24
	//>>for f_cpu 1 and 8 M  ,,,pre_scaler 8 and in mili seconds
	//it will over every 1 mili_second>>(1/1M/pre) >>8 usec per every count
	//>>> com = 1000/8 -> 125 >>    8usec * 125 =1000 usec

	TCCR2 = (1<<FOC2) | (1<<WGM21);  //clock is zero to make timer un_active
     e44:	e5 e4       	ldi	r30, 0x45	; 69
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	88 e8       	ldi	r24, 0x88	; 136
     e4a:	80 83       	st	Z, r24
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DELAY_ms>:

void DELAY_ms   (uint16 number_of_ms){
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DELAY_ms+0x6>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_ms >0 ){
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	89 f1       	breq	.+98     	; 0xecc <DELAY_ms+0x7a>
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
     e6a:	a5 e4       	ldi	r26, 0x45	; 69
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e5 e4       	ldi	r30, 0x45	; 69
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 7f       	andi	r24, 0xF8	; 248
     e76:	83 60       	ori	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <DELAY_ms+0x48>
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){

			while(BIT_IS_CLEAR(TIFR,OCF2) );
     e7c:	e8 e5       	ldi	r30, 0x58	; 88
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	dc f7       	brge	.-10     	; 0xe7c <DELAY_ms+0x2a>
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
     e86:	a8 e5       	ldi	r26, 0x58	; 88
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e5       	ldi	r30, 0x58	; 88
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
			TCNT2 = 0;         //to clear timer
     e94:	e4 e4       	ldi	r30, 0x44	; 68
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	10 82       	st	Z, r1

	if(number_of_ms >0 ){
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){
     e9a:	1b 82       	std	Y+3, r1	; 0x03
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	11 f0       	breq	.+4      	; 0xea8 <DELAY_ms+0x56>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	88 23       	and	r24, r24
     eb6:	11 f7       	brne	.-60     	; 0xe7c <DELAY_ms+0x2a>
			while(BIT_IS_CLEAR(TIFR,OCF2) );
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
			TCNT2 = 0;         //to clear timer
		}

		TCCR2&=~0x07;      //to turn timer off >> clear clock
     eb8:	a5 e4       	ldi	r26, 0x45	; 69
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e4       	ldi	r30, 0x45	; 69
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	88 7f       	andi	r24, 0xF8	; 248
     ec4:	8c 93       	st	X, r24
		TCNT2 = 0;         //to clear timer
     ec6:	e4 e4       	ldi	r30, 0x44	; 68
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	10 82       	st	Z, r1
	}
} 
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <DELAY_sec>:


void DELAY_sec  (uint16 number_of_sec){
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <DELAY_sec+0x6>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_sec > 0 ){
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	a1 f0       	breq	.+40     	; 0xf18 <DELAY_sec+0x40>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <DELAY_sec+0x22>
		while (number_of_sec--)
			DELAY_ms   (1000);
     ef2:	88 ee       	ldi	r24, 0xE8	; 232
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0e 94 29 07 	call	0xe52	; 0xe52 <DELAY_ms>


void DELAY_sec  (uint16 number_of_sec){

	if(number_of_sec > 0 ){
		while (number_of_sec--)
     efa:	1b 82       	std	Y+3, r1	; 0x03
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	11 f0       	breq	.+4      	; 0xf08 <DELAY_sec+0x30>
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8b 83       	std	Y+3, r24	; 0x03
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	88 23       	and	r24, r24
     f16:	69 f7       	brne	.-38     	; 0xef2 <DELAY_sec+0x1a>
			DELAY_ms   (1000);
	}
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <INT0_Init>:
static volatile void (*g_INT0_CallBackPtr)(void) = NULL;
static volatile void (*g_INT1_CallBackPtr)(void) = NULL;
static volatile void (*g_INT2_CallBackPtr)(void) = NULL;

void INT0_Init(INTERRUPT_Config *Config_Ptr)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <INT0_Init+0x6>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<2);  //enable external interrupt 0
     f32:	a1 e3       	ldi	r26, 0x31	; 49
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e3       	ldi	r30, 0x31	; 49
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	8c 93       	st	X, r24
	PORTD |= (Config_Ptr->pull<<2); //enable pull up for interrupt 0
     f40:	a2 e3       	ldi	r26, 0x32	; 50
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	28 2f       	mov	r18, r24
     f4c:	e9 81       	ldd	r30, Y+1	; 0x01
     f4e:	fa 81       	ldd	r31, Y+2	; 0x02
     f50:	81 81       	ldd	r24, Z+1	; 0x01
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	82 2b       	or	r24, r18
     f60:	8c 93       	st	X, r24

	MCUCR=(MCUCR&0xfc)|(Config_Ptr->edge&0x03); //edge for rising or falling edge
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	98 2f       	mov	r25, r24
     f6e:	9c 7f       	andi	r25, 0xFC	; 252
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	80 81       	ld	r24, Z
     f76:	83 70       	andi	r24, 0x03	; 3
     f78:	89 2b       	or	r24, r25
     f7a:	8c 93       	st	X, r24
	GICR |=(1<<INT0); //enable interrupt 0 module
     f7c:	ab e5       	ldi	r26, 0x5B	; 91
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	eb e5       	ldi	r30, 0x5B	; 91
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	8c 93       	st	X, r24
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <INT0_CallBack>:
void INT0_CallBack(void(*a_ptr)(void))
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <INT0_CallBack+0x6>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT0_CallBackPtr = a_ptr;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	90 93 6a 01 	sts	0x016A, r25
     faa:	80 93 69 01 	sts	0x0169, r24
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <__vector_1>:
ISR(INT0_vect)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_CallBackPtr != NULL)
     fe2:	80 91 69 01 	lds	r24, 0x0169
     fe6:	90 91 6a 01 	lds	r25, 0x016A
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	29 f0       	breq	.+10     	; 0xff8 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
     fee:	e0 91 69 01 	lds	r30, 0x0169
     ff2:	f0 91 6a 01 	lds	r31, 0x016A
     ff6:	09 95       	icall
	}
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <INT1_Init>:

////////////////////////////////////////////////////
void INT1_Init(INTERRUPT_Config *Config_Ptr)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <INT1_Init+0x6>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<3);   // pin
    102c:	a1 e3       	ldi	r26, 0x31	; 49
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e3       	ldi	r30, 0x31	; 49
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	87 7f       	andi	r24, 0xF7	; 247
    1038:	8c 93       	st	X, r24
	PORTD |= (Config_Ptr->pull<<3);   //enable pull up for interrupt 1
    103a:	a2 e3       	ldi	r26, 0x32	; 50
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	28 2f       	mov	r18, r24
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	81 81       	ldd	r24, Z+1	; 0x01
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	82 2b       	or	r24, r18
    105e:	8c 93       	st	X, r24

	//flags
    MCUCR=(MCUCR&0xf3)|((Config_Ptr->edge&0x03)<<2);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	28 2f       	mov	r18, r24
    106c:	23 7f       	andi	r18, 0xF3	; 243
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	80 81       	ld	r24, Z
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	83 70       	andi	r24, 0x03	; 3
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	82 2b       	or	r24, r18
    1086:	8c 93       	st	X, r24
    GICR |=(1<<INT1);  //module
    1088:	ab e5       	ldi	r26, 0x5B	; 91
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	eb e5       	ldi	r30, 0x5B	; 91
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	80 68       	ori	r24, 0x80	; 128
    1094:	8c 93       	st	X, r24
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <INT1_CallBack>:
void INT1_CallBack(void(*a_ptr)(void))
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <INT1_CallBack+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT1_CallBackPtr = a_ptr;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	90 93 6c 01 	sts	0x016C, r25
    10b6:	80 93 6b 01 	sts	0x016B, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <__vector_2>:
ISR(INT1_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_CallBackPtr != NULL)
    10ee:	80 91 6b 01 	lds	r24, 0x016B
    10f2:	90 91 6c 01 	lds	r25, 0x016C
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	29 f0       	breq	.+10     	; 0x1104 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    10fa:	e0 91 6b 01 	lds	r30, 0x016B
    10fe:	f0 91 6c 01 	lds	r31, 0x016C
    1102:	09 95       	icall
	}
}
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <INT2_Init>:
////////////////////////////////////////////////////
void INT2_Init(INTERRUPT_Config *Config_Ptr)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <INT2_Init+0x6>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<2);
    1138:	a7 e3       	ldi	r26, 0x37	; 55
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8b 7f       	andi	r24, 0xFB	; 251
    1144:	8c 93       	st	X, r24
	PORTB|=  (Config_Ptr->pull<<2);
    1146:	a8 e3       	ldi	r26, 0x38	; 56
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e3       	ldi	r30, 0x38	; 56
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 2b       	or	r24, r18
    1166:	8c 93       	st	X, r24

    MCUCSR=(MCUCSR&0xbf)|((Config_Ptr->edge&0x01)<<ISC2); //<<6
    1168:	a4 e5       	ldi	r26, 0x54	; 84
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e4 e5       	ldi	r30, 0x54	; 84
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	28 2f       	mov	r18, r24
    1174:	2f 7b       	andi	r18, 0xBF	; 191
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	80 81       	ld	r24, Z
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	00 24       	eor	r0, r0
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	07 94       	ror	r0
    118c:	96 95       	lsr	r25
    118e:	87 95       	ror	r24
    1190:	07 94       	ror	r0
    1192:	98 2f       	mov	r25, r24
    1194:	80 2d       	mov	r24, r0
    1196:	82 2b       	or	r24, r18
    1198:	8c 93       	st	X, r24
    GICR |=(1<<INT2);
    119a:	ab e5       	ldi	r26, 0x5B	; 91
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e5       	ldi	r30, 0x5B	; 91
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 62       	ori	r24, 0x20	; 32
    11a6:	8c 93       	st	X, r24
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <INT2_CallBack>:
void INT2_CallBack(void(*a_ptr)(void))
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <INT2_CallBack+0x6>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT2_CallBackPtr = a_ptr;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	90 93 6e 01 	sts	0x016E, r25
    11c8:	80 93 6d 01 	sts	0x016D, r24
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <__vector_18>:
ISR(INT2_vect)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_CallBackPtr != NULL)
    1200:	80 91 6d 01 	lds	r24, 0x016D
    1204:	90 91 6e 01 	lds	r25, 0x016E
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	29 f0       	breq	.+10     	; 0x1216 <__vector_18+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    120c:	e0 91 6d 01 	lds	r30, 0x016D
    1210:	f0 91 6e 01 	lds	r31, 0x016E
    1214:	09 95       	icall
	}
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <INT_Deinit>:

////////////////////////////////////////////////////
void INT_Deinit(uint8 interrupts_det)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	89 83       	std	Y+1, r24	; 0x01
    /*clear specified interrupts*/    
	GICR &=~(interrupts_det<<5);
    1248:	ab e5       	ldi	r26, 0x5B	; 91
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e5       	ldi	r30, 0x5B	; 91
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	82 95       	swap	r24
    1260:	92 95       	swap	r25
    1262:	90 7f       	andi	r25, 0xF0	; 240
    1264:	98 27       	eor	r25, r24
    1266:	80 7f       	andi	r24, 0xF0	; 240
    1268:	98 27       	eor	r25, r24
    126a:	80 95       	com	r24
    126c:	82 23       	and	r24, r18
    126e:	8c 93       	st	X, r24
}
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <main>:
/*watch */

#include "switches.h"
#include "sev_segment.h"

int main(void){
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62

	switch_init();
    1280:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <switch_init>
	seven_seg_init();
    1284:	0e 94 5e 09 	call	0x12bc	; 0x12bc <seven_seg_init>

	while(1){

		seg_display3(Seconds,Minutes,Hours);
    1288:	80 91 73 01 	lds	r24, 0x0173
    128c:	90 91 72 01 	lds	r25, 0x0172
    1290:	20 91 71 01 	lds	r18, 0x0171
    1294:	69 2f       	mov	r22, r25
    1296:	42 2f       	mov	r20, r18
    1298:	0e 94 81 09 	call	0x1302	; 0x1302 <seg_display3>
    129c:	0a c0       	rjmp	.+20     	; 0x12b2 <main+0x3a>

		while(g_turn_counter)
        	seg_display3(counter_S, counter_M, counter_H);
    129e:	80 91 76 01 	lds	r24, 0x0176
    12a2:	90 91 75 01 	lds	r25, 0x0175
    12a6:	20 91 74 01 	lds	r18, 0x0174
    12aa:	69 2f       	mov	r22, r25
    12ac:	42 2f       	mov	r20, r18
    12ae:	0e 94 81 09 	call	0x1302	; 0x1302 <seg_display3>

	while(1){

		seg_display3(Seconds,Minutes,Hours);

		while(g_turn_counter)
    12b2:	80 91 77 01 	lds	r24, 0x0177
    12b6:	88 23       	and	r24, r24
    12b8:	91 f7       	brne	.-28     	; 0x129e <main+0x26>
    12ba:	e6 cf       	rjmp	.-52     	; 0x1288 <main+0x10>

000012bc <seven_seg_init>:
#include "sev_segment.h"

void seven_seg_init(){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	SEG_CTRL_PORT_DIR   = 0xFF;     //set control port output
	SEG_DATA_PORT_OUT  &=~0x0F;      //out 0 in the first
	SEG_CTRL_PORT_OUT   = 0x00;      //out 0 in the first

#elif (N_OF_VALUES == 3)
	SEG_DATA_PORT_DIR  |= 0x0F;     //set 4pins(0,1,2,3) of data as output
    12c4:	a4 e3       	ldi	r26, 0x34	; 52
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e4 e3       	ldi	r30, 0x34	; 52
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 60       	ori	r24, 0x0F	; 15
    12d0:	8c 93       	st	X, r24
	SEG_CTRL_PORT_DIR  |= 0x3F;     //set 6pins(0,1,2,3,4,5)control port output
    12d2:	aa e3       	ldi	r26, 0x3A	; 58
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ea e3       	ldi	r30, 0x3A	; 58
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 63       	ori	r24, 0x3F	; 63
    12de:	8c 93       	st	X, r24
	SEG_DATA_PORT_OUT  &=~0x0F;      //out 0 in the first
    12e0:	a5 e3       	ldi	r26, 0x35	; 53
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e3       	ldi	r30, 0x35	; 53
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 7f       	andi	r24, 0xF0	; 240
    12ec:	8c 93       	st	X, r24
	SEG_CTRL_PORT_OUT  &=~0x3F;      //out 0 in the first
    12ee:	ab e3       	ldi	r26, 0x3B	; 59
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	eb e3       	ldi	r30, 0x3B	; 59
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 7c       	andi	r24, 0xC0	; 192
    12fa:	8c 93       	st	X, r24
#elif (N_OF_VALUES == 1)
	SEG_DATA_PORT_DIR  |= 0x3F;     //set data(0,1,2,3) and control(4,5) pins as output
	SEG_DATA_PORT_OUT  &=~0x3F;      //out 0 in the first

#endif
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <seg_display3>:
	_delay_ms(delay_between_segments_ms);

}
#elif (N_OF_VALUES == 3)
void seg_display3(uint8 number1 ,uint8 number2 ,uint8 number3)
{
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	c8 55       	subi	r28, 0x58	; 88
    1310:	d0 40       	sbci	r29, 0x00	; 0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	fe 01       	movw	r30, r28
    131e:	ea 5a       	subi	r30, 0xAA	; 170
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 83       	st	Z, r24
    1324:	fe 01       	movw	r30, r28
    1326:	e9 5a       	subi	r30, 0xA9	; 169
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	60 83       	st	Z, r22
    132c:	fe 01       	movw	r30, r28
    132e:	e8 5a       	subi	r30, 0xA8	; 168
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	40 83       	st	Z, r20
	uint8 temp ;              //just variable
	temp = number1 % 10;   //to get fist num.
    1334:	de 01       	movw	r26, r28
    1336:	ab 5a       	subi	r26, 0xAB	; 171
    1338:	bf 4f       	sbci	r27, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	ea 5a       	subi	r30, 0xAA	; 170
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	9a e0       	ldi	r25, 0x0A	; 10
    1344:	69 2f       	mov	r22, r25
    1346:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    134a:	89 2f       	mov	r24, r25
    134c:	8c 93       	st	X, r24
	SEG_CTRL_PORT_OUT = (1<<seg6);   //place to display
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	80 83       	st	Z, r24
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f); //insert num in data port
    1356:	a5 e3       	ldi	r26, 0x35	; 53
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	98 2f       	mov	r25, r24
    1362:	90 7f       	andi	r25, 0xF0	; 240
    1364:	fe 01       	movw	r30, r28
    1366:	eb 5a       	subi	r30, 0xAB	; 171
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	8f 70       	andi	r24, 0x0F	; 15
    136e:	89 2b       	or	r24, r25
    1370:	8c 93       	st	X, r24
    1372:	fe 01       	movw	r30, r28
    1374:	ef 5a       	subi	r30, 0xAF	; 175
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 ea       	ldi	r26, 0xA0	; 160
    137e:	b0 e4       	ldi	r27, 0x40	; 64
    1380:	80 83       	st	Z, r24
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	a2 83       	std	Z+2, r26	; 0x02
    1386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1388:	8e 01       	movw	r16, r28
    138a:	03 5b       	subi	r16, 0xB3	; 179
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	fe 01       	movw	r30, r28
    1390:	ef 5a       	subi	r30, 0xAF	; 175
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	4a ef       	ldi	r20, 0xFA	; 250
    13a2:	54 e4       	ldi	r21, 0x44	; 68
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	f8 01       	movw	r30, r16
    13ae:	80 83       	st	Z, r24
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	a2 83       	std	Z+2, r26	; 0x02
    13b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13b6:	fe 01       	movw	r30, r28
    13b8:	e3 5b       	subi	r30, 0xB3	; 179
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e8       	ldi	r20, 0x80	; 128
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13d0:	88 23       	and	r24, r24
    13d2:	44 f4       	brge	.+16     	; 0x13e4 <seg_display3+0xe2>
		__ticks = 1;
    13d4:	fe 01       	movw	r30, r28
    13d6:	e5 5b       	subi	r30, 0xB5	; 181
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    13e2:	64 c0       	rjmp	.+200    	; 0x14ac <seg_display3+0x1aa>
	else if (__tmp > 65535)
    13e4:	fe 01       	movw	r30, r28
    13e6:	e3 5b       	subi	r30, 0xB3	; 179
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <seg_display3+0x102>
    1402:	43 c0       	rjmp	.+134    	; 0x148a <seg_display3+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	fe 01       	movw	r30, r28
    1406:	ef 5a       	subi	r30, 0xAF	; 175
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8e 01       	movw	r16, r28
    1424:	05 5b       	subi	r16, 0xB5	; 181
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	1f c0       	rjmp	.+62     	; 0x147a <seg_display3+0x178>
    143c:	fe 01       	movw	r30, r28
    143e:	e7 5b       	subi	r30, 0xB7	; 183
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	88 ec       	ldi	r24, 0xC8	; 200
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    144a:	fe 01       	movw	r30, r28
    144c:	e7 5b       	subi	r30, 0xB7	; 183
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <seg_display3+0x152>
    1458:	fe 01       	movw	r30, r28
    145a:	e7 5b       	subi	r30, 0xB7	; 183
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	de 01       	movw	r26, r28
    1464:	a5 5b       	subi	r26, 0xB5	; 181
    1466:	bf 4f       	sbci	r27, 0xFF	; 255
    1468:	fe 01       	movw	r30, r28
    146a:	e5 5b       	subi	r30, 0xB5	; 181
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	fe 01       	movw	r30, r28
    147c:	e5 5b       	subi	r30, 0xB5	; 181
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	d1 f6       	brne	.-76     	; 0x143c <seg_display3+0x13a>
    1488:	27 c0       	rjmp	.+78     	; 0x14d8 <seg_display3+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	8e 01       	movw	r16, r28
    148c:	05 5b       	subi	r16, 0xB5	; 181
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	fe 01       	movw	r30, r28
    1492:	e3 5b       	subi	r30, 0xB3	; 179
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	f8 01       	movw	r30, r16
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	de 01       	movw	r26, r28
    14ae:	a9 5b       	subi	r26, 0xB9	; 185
    14b0:	bf 4f       	sbci	r27, 0xFF	; 255
    14b2:	fe 01       	movw	r30, r28
    14b4:	e5 5b       	subi	r30, 0xB5	; 181
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	8d 93       	st	X+, r24
    14be:	9c 93       	st	X, r25
    14c0:	fe 01       	movw	r30, r28
    14c2:	e9 5b       	subi	r30, 0xB9	; 185
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <seg_display3+0x1c8>
    14ce:	fe 01       	movw	r30, r28
    14d0:	e9 5b       	subi	r30, 0xB9	; 185
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
	_delay_ms(delay_between_segments_ms);                  //dalay

	temp = number1 / 10;         //to get fist num.
    14d8:	de 01       	movw	r26, r28
    14da:	ab 5a       	subi	r26, 0xAB	; 171
    14dc:	bf 4f       	sbci	r27, 0xFF	; 255
    14de:	fe 01       	movw	r30, r28
    14e0:	ea 5a       	subi	r30, 0xAA	; 170
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 81       	ld	r24, Z
    14e6:	9a e0       	ldi	r25, 0x0A	; 10
    14e8:	69 2f       	mov	r22, r25
    14ea:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    14ee:	8c 93       	st	X, r24
	SEG_CTRL_PORT_OUT = (1<<seg5);         //place to display
    14f0:	eb e3       	ldi	r30, 0x3B	; 59
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 e1       	ldi	r24, 0x10	; 16
    14f6:	80 83       	st	Z, r24
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);  //insert num in data port
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	98 2f       	mov	r25, r24
    1504:	90 7f       	andi	r25, 0xF0	; 240
    1506:	fe 01       	movw	r30, r28
    1508:	eb 5a       	subi	r30, 0xAB	; 171
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	8f 70       	andi	r24, 0x0F	; 15
    1510:	89 2b       	or	r24, r25
    1512:	8c 93       	st	X, r24
    1514:	fe 01       	movw	r30, r28
    1516:	ed 5b       	subi	r30, 0xBD	; 189
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 ea       	ldi	r26, 0xA0	; 160
    1520:	b0 e4       	ldi	r27, 0x40	; 64
    1522:	80 83       	st	Z, r24
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	a2 83       	std	Z+2, r26	; 0x02
    1528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	8e 01       	movw	r16, r28
    152c:	01 5c       	subi	r16, 0xC1	; 193
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	ed 5b       	subi	r30, 0xBD	; 189
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a ef       	ldi	r20, 0xFA	; 250
    1544:	54 e4       	ldi	r21, 0x44	; 68
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	f8 01       	movw	r30, r16
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1558:	fe 01       	movw	r30, r28
    155a:	ff 96       	adiw	r30, 0x3f	; 63
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	2c f4       	brge	.+10     	; 0x157e <seg_display3+0x27c>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9e af       	std	Y+62, r25	; 0x3e
    157a:	8d af       	std	Y+61, r24	; 0x3d
    157c:	46 c0       	rjmp	.+140    	; 0x160a <seg_display3+0x308>
	else if (__tmp > 65535)
    157e:	fe 01       	movw	r30, r28
    1580:	ff 96       	adiw	r30, 0x3f	; 63
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	64 f5       	brge	.+88     	; 0x15f2 <seg_display3+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	fe 01       	movw	r30, r28
    159c:	ed 5b       	subi	r30, 0xBD	; 189
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e af       	std	Y+62, r25	; 0x3e
    15c6:	8d af       	std	Y+61, r24	; 0x3d
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <seg_display3+0x2e6>
    15ca:	88 ec       	ldi	r24, 0xC8	; 200
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c af       	std	Y+60, r25	; 0x3c
    15d0:	8b af       	std	Y+59, r24	; 0x3b
    15d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    15d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <seg_display3+0x2d4>
    15da:	9c af       	std	Y+60, r25	; 0x3c
    15dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8d ad       	ldd	r24, Y+61	; 0x3d
    15e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9e af       	std	Y+62, r25	; 0x3e
    15e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <seg_display3+0x2c8>
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <seg_display3+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	fe 01       	movw	r30, r28
    15f4:	ff 96       	adiw	r30, 0x3f	; 63
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e af       	std	Y+62, r25	; 0x3e
    1608:	8d af       	std	Y+61, r24	; 0x3d
    160a:	8d ad       	ldd	r24, Y+61	; 0x3d
    160c:	9e ad       	ldd	r25, Y+62	; 0x3e
    160e:	9a af       	std	Y+58, r25	; 0x3a
    1610:	89 af       	std	Y+57, r24	; 0x39
    1612:	89 ad       	ldd	r24, Y+57	; 0x39
    1614:	9a ad       	ldd	r25, Y+58	; 0x3a
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <seg_display3+0x314>
    161a:	9a af       	std	Y+58, r25	; 0x3a
    161c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(delay_between_segments_ms);

	temp = number2 % 10;
    161e:	de 01       	movw	r26, r28
    1620:	ab 5a       	subi	r26, 0xAB	; 171
    1622:	bf 4f       	sbci	r27, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	e9 5a       	subi	r30, 0xA9	; 169
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	9a e0       	ldi	r25, 0x0A	; 10
    162e:	69 2f       	mov	r22, r25
    1630:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    1634:	89 2f       	mov	r24, r25
    1636:	8c 93       	st	X, r24
	SEG_CTRL_PORT_OUT = (1<<seg4);
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	88 e0       	ldi	r24, 0x08	; 8
    163e:	80 83       	st	Z, r24
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    1640:	a5 e3       	ldi	r26, 0x35	; 53
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	98 2f       	mov	r25, r24
    164c:	90 7f       	andi	r25, 0xF0	; 240
    164e:	fe 01       	movw	r30, r28
    1650:	eb 5a       	subi	r30, 0xAB	; 171
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	8f 70       	andi	r24, 0x0F	; 15
    1658:	89 2b       	or	r24, r25
    165a:	8c 93       	st	X, r24
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 ea       	ldi	r26, 0xA0	; 160
    1662:	b0 e4       	ldi	r27, 0x40	; 64
    1664:	8d ab       	std	Y+53, r24	; 0x35
    1666:	9e ab       	std	Y+54, r25	; 0x36
    1668:	af ab       	std	Y+55, r26	; 0x37
    166a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	6d a9       	ldd	r22, Y+53	; 0x35
    166e:	7e a9       	ldd	r23, Y+54	; 0x36
    1670:	8f a9       	ldd	r24, Y+55	; 0x37
    1672:	98 ad       	ldd	r25, Y+56	; 0x38
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	4a ef       	ldi	r20, 0xFA	; 250
    167a:	54 e4       	ldi	r21, 0x44	; 68
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	89 ab       	std	Y+49, r24	; 0x31
    1686:	9a ab       	std	Y+50, r25	; 0x32
    1688:	ab ab       	std	Y+51, r26	; 0x33
    168a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    168c:	69 a9       	ldd	r22, Y+49	; 0x31
    168e:	7a a9       	ldd	r23, Y+50	; 0x32
    1690:	8b a9       	ldd	r24, Y+51	; 0x33
    1692:	9c a9       	ldd	r25, Y+52	; 0x34
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	2c f4       	brge	.+10     	; 0x16ae <seg_display3+0x3ac>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	98 ab       	std	Y+48, r25	; 0x30
    16aa:	8f a7       	std	Y+47, r24	; 0x2f
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <seg_display3+0x42a>
	else if (__tmp > 65535)
    16ae:	69 a9       	ldd	r22, Y+49	; 0x31
    16b0:	7a a9       	ldd	r23, Y+50	; 0x32
    16b2:	8b a9       	ldd	r24, Y+51	; 0x33
    16b4:	9c a9       	ldd	r25, Y+52	; 0x34
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	4c f5       	brge	.+82     	; 0x1718 <seg_display3+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	6d a9       	ldd	r22, Y+53	; 0x35
    16c8:	7e a9       	ldd	r23, Y+54	; 0x36
    16ca:	8f a9       	ldd	r24, Y+55	; 0x37
    16cc:	98 ad       	ldd	r25, Y+56	; 0x38
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	98 ab       	std	Y+48, r25	; 0x30
    16ec:	8f a7       	std	Y+47, r24	; 0x2f
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <seg_display3+0x40c>
    16f0:	88 ec       	ldi	r24, 0xC8	; 200
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e a7       	std	Y+46, r25	; 0x2e
    16f6:	8d a7       	std	Y+45, r24	; 0x2d
    16f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <seg_display3+0x3fa>
    1700:	9e a7       	std	Y+46, r25	; 0x2e
    1702:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	8f a5       	ldd	r24, Y+47	; 0x2f
    1706:	98 a9       	ldd	r25, Y+48	; 0x30
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	98 ab       	std	Y+48, r25	; 0x30
    170c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1710:	98 a9       	ldd	r25, Y+48	; 0x30
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f7       	brne	.-38     	; 0x16f0 <seg_display3+0x3ee>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <seg_display3+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	69 a9       	ldd	r22, Y+49	; 0x31
    171a:	7a a9       	ldd	r23, Y+50	; 0x32
    171c:	8b a9       	ldd	r24, Y+51	; 0x33
    171e:	9c a9       	ldd	r25, Y+52	; 0x34
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	98 ab       	std	Y+48, r25	; 0x30
    172a:	8f a7       	std	Y+47, r24	; 0x2f
    172c:	8f a5       	ldd	r24, Y+47	; 0x2f
    172e:	98 a9       	ldd	r25, Y+48	; 0x30
    1730:	9c a7       	std	Y+44, r25	; 0x2c
    1732:	8b a7       	std	Y+43, r24	; 0x2b
    1734:	8b a5       	ldd	r24, Y+43	; 0x2b
    1736:	9c a5       	ldd	r25, Y+44	; 0x2c
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <seg_display3+0x436>
    173c:	9c a7       	std	Y+44, r25	; 0x2c
    173e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(delay_between_segments_ms);

	temp = number2 / 10;
    1740:	de 01       	movw	r26, r28
    1742:	ab 5a       	subi	r26, 0xAB	; 171
    1744:	bf 4f       	sbci	r27, 0xFF	; 255
    1746:	fe 01       	movw	r30, r28
    1748:	e9 5a       	subi	r30, 0xA9	; 169
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	9a e0       	ldi	r25, 0x0A	; 10
    1750:	69 2f       	mov	r22, r25
    1752:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    1756:	8c 93       	st	X, r24
	SEG_CTRL_PORT_OUT = (1<<seg3);
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	80 83       	st	Z, r24
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    1760:	a5 e3       	ldi	r26, 0x35	; 53
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	98 2f       	mov	r25, r24
    176c:	90 7f       	andi	r25, 0xF0	; 240
    176e:	fe 01       	movw	r30, r28
    1770:	eb 5a       	subi	r30, 0xAB	; 171
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	8f 70       	andi	r24, 0x0F	; 15
    1778:	89 2b       	or	r24, r25
    177a:	8c 93       	st	X, r24
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 ea       	ldi	r26, 0xA0	; 160
    1782:	b0 e4       	ldi	r27, 0x40	; 64
    1784:	8f a3       	std	Y+39, r24	; 0x27
    1786:	98 a7       	std	Y+40, r25	; 0x28
    1788:	a9 a7       	std	Y+41, r26	; 0x29
    178a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6f a1       	ldd	r22, Y+39	; 0x27
    178e:	78 a5       	ldd	r23, Y+40	; 0x28
    1790:	89 a5       	ldd	r24, Y+41	; 0x29
    1792:	9a a5       	ldd	r25, Y+42	; 0x2a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8b a3       	std	Y+35, r24	; 0x23
    17a6:	9c a3       	std	Y+36, r25	; 0x24
    17a8:	ad a3       	std	Y+37, r26	; 0x25
    17aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ac:	6b a1       	ldd	r22, Y+35	; 0x23
    17ae:	7c a1       	ldd	r23, Y+36	; 0x24
    17b0:	8d a1       	ldd	r24, Y+37	; 0x25
    17b2:	9e a1       	ldd	r25, Y+38	; 0x26
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <seg_display3+0x4cc>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9a a3       	std	Y+34, r25	; 0x22
    17ca:	89 a3       	std	Y+33, r24	; 0x21
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <seg_display3+0x54a>
	else if (__tmp > 65535)
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <seg_display3+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6f a1       	ldd	r22, Y+39	; 0x27
    17e8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ea:	89 a5       	ldd	r24, Y+41	; 0x29
    17ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9a a3       	std	Y+34, r25	; 0x22
    180c:	89 a3       	std	Y+33, r24	; 0x21
    180e:	0f c0       	rjmp	.+30     	; 0x182e <seg_display3+0x52c>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
    1818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181a:	98 a1       	ldd	r25, Y+32	; 0x20
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <seg_display3+0x51a>
    1820:	98 a3       	std	Y+32, r25	; 0x20
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	89 a1       	ldd	r24, Y+33	; 0x21
    1830:	9a a1       	ldd	r25, Y+34	; 0x22
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <seg_display3+0x50e>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <seg_display3+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9a a3       	std	Y+34, r25	; 0x22
    184a:	89 a3       	std	Y+33, r24	; 0x21
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <seg_display3+0x556>
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_between_segments_ms);

	temp = number3 % 10;
    1860:	de 01       	movw	r26, r28
    1862:	ab 5a       	subi	r26, 0xAB	; 171
    1864:	bf 4f       	sbci	r27, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	e8 5a       	subi	r30, 0xA8	; 168
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	9a e0       	ldi	r25, 0x0A	; 10
    1870:	69 2f       	mov	r22, r25
    1872:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    1876:	89 2f       	mov	r24, r25
    1878:	8c 93       	st	X, r24
//#if (TOOGLE == 3)
//	SEG_CTRL_PORT_OUT ^= (1<<seg2);
//#else
	SEG_CTRL_PORT_OUT  = (1<<seg2);
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	80 83       	st	Z, r24
//#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	98 2f       	mov	r25, r24
    188e:	90 7f       	andi	r25, 0xF0	; 240
    1890:	fe 01       	movw	r30, r28
    1892:	eb 5a       	subi	r30, 0xAB	; 171
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	8f 70       	andi	r24, 0x0F	; 15
    189a:	89 2b       	or	r24, r25
    189c:	8c 93       	st	X, r24
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 ea       	ldi	r26, 0xA0	; 160
    18a4:	b0 e4       	ldi	r27, 0x40	; 64
    18a6:	89 8f       	std	Y+25, r24	; 0x19
    18a8:	9a 8f       	std	Y+26, r25	; 0x1a
    18aa:	ab 8f       	std	Y+27, r26	; 0x1b
    18ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	69 8d       	ldd	r22, Y+25	; 0x19
    18b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8d 8b       	std	Y+21, r24	; 0x15
    18c8:	9e 8b       	std	Y+22, r25	; 0x16
    18ca:	af 8b       	std	Y+23, r26	; 0x17
    18cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ce:	6d 89       	ldd	r22, Y+21	; 0x15
    18d0:	7e 89       	ldd	r23, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <seg_display3+0x5ee>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <seg_display3+0x66c>
	else if (__tmp > 65535)
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <seg_display3+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <seg_display3+0x64e>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9a 8b       	std	Y+18, r25	; 0x12
    1938:	89 8b       	std	Y+17, r24	; 0x11
    193a:	89 89       	ldd	r24, Y+17	; 0x11
    193c:	9a 89       	ldd	r25, Y+18	; 0x12
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <seg_display3+0x63c>
    1942:	9a 8b       	std	Y+18, r25	; 0x12
    1944:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <seg_display3+0x630>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <seg_display3+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6d 89       	ldd	r22, Y+21	; 0x15
    195c:	7e 89       	ldd	r23, Y+22	; 0x16
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9c 8b       	std	Y+20, r25	; 0x14
    196c:	8b 8b       	std	Y+19, r24	; 0x13
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	9c 89       	ldd	r25, Y+20	; 0x14
    1972:	98 8b       	std	Y+16, r25	; 0x10
    1974:	8f 87       	std	Y+15, r24	; 0x0f
    1976:	8f 85       	ldd	r24, Y+15	; 0x0f
    1978:	98 89       	ldd	r25, Y+16	; 0x10
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <seg_display3+0x678>
    197e:	98 8b       	std	Y+16, r25	; 0x10
    1980:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(delay_between_segments_ms);

	temp = number3 / 10;
    1982:	de 01       	movw	r26, r28
    1984:	ab 5a       	subi	r26, 0xAB	; 171
    1986:	bf 4f       	sbci	r27, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	e8 5a       	subi	r30, 0xA8	; 168
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	9a e0       	ldi	r25, 0x0A	; 10
    1992:	69 2f       	mov	r22, r25
    1994:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodqi4>
    1998:	8c 93       	st	X, r24
//#if (TOOGLE == 3)
//	SEG_CTRL_PORT_OUT ^= (1<<seg1);
//#else
	SEG_CTRL_PORT_OUT  = (1<<seg1);
    199a:	eb e3       	ldi	r30, 0x3B	; 59
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
//#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    19a2:	a5 e3       	ldi	r26, 0x35	; 53
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e5 e3       	ldi	r30, 0x35	; 53
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	98 2f       	mov	r25, r24
    19ae:	90 7f       	andi	r25, 0xF0	; 240
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 5a       	subi	r30, 0xAB	; 171
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 70       	andi	r24, 0x0F	; 15
    19ba:	89 2b       	or	r24, r25
    19bc:	8c 93       	st	X, r24
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 ea       	ldi	r26, 0xA0	; 160
    19c4:	b0 e4       	ldi	r27, 0x40	; 64
    19c6:	8b 87       	std	Y+11, r24	; 0x0b
    19c8:	9c 87       	std	Y+12, r25	; 0x0c
    19ca:	ad 87       	std	Y+13, r26	; 0x0d
    19cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	98 87       	std	Y+8, r25	; 0x08
    19ea:	a9 87       	std	Y+9, r26	; 0x09
    19ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <seg_display3+0x70e>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <seg_display3+0x78c>
	else if (__tmp > 65535)
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <seg_display3+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <seg_display3+0x76e>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <seg_display3+0x75c>
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <seg_display3+0x750>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <seg_display3+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <seg_display3+0x798>
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(delay_between_segments_ms);
}
    1aa2:	c8 5a       	subi	r28, 0xA8	; 168
    1aa4:	df 4f       	sbci	r29, 0xFF	; 255
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <switch_init>:
static volatile uint8   g_clock_flag=0 ,g_counter_flag=0  ;
volatile uint8    Hours=0,   Minutes=0,    Seconds=0 ;
volatile uint8    counter_H=0, counter_M=0, counter_S=0   ,  g_turn_counter=0 ;

void switch_init()
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <switch_init+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <switch_init+0x8>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <switch_init+0xa>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	sei();
    1ac8:	78 94       	sei

	TIMER1_CTC_A_CallBack(callBackTimer1);
    1aca:	8b e9       	ldi	r24, 0x9B	; 155
    1acc:	9d e0       	ldi	r25, 0x0D	; 13
    1ace:	0e 94 2d 10 	call	0x205a	; 0x205a <TIMER1_CTC_A_CallBack>
	INT0_CallBack(callBackin0);
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	9d e0       	ldi	r25, 0x0D	; 13
    1ad6:	0e 94 ca 07 	call	0xf94	; 0xf94 <INT0_CallBack>
	INT1_CallBack(callBackin1);
    1ada:	84 e2       	ldi	r24, 0x24	; 36
    1adc:	9e e0       	ldi	r25, 0x0E	; 14
    1ade:	0e 94 50 08 	call	0x10a0	; 0x10a0 <INT1_CallBack>
	INT2_CallBack(callBackin2);
    1ae2:	81 e9       	ldi	r24, 0x91	; 145
    1ae4:	9e e0       	ldi	r25, 0x0E	; 14
    1ae6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <INT2_CallBack>

	INTERRUPT_Config int0_Conf={FALLING_EDGE, PULL_UP} ,
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	8a 83       	std	Y+2, r24	; 0x02
			         int1_Conf={FALLING_EDGE, PULL_UP} ,
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	8c 83       	std	Y+4, r24	; 0x04
					 int2_Conf={FALLING_EDGE, PULL_UP} ;
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8e 83       	std	Y+6, r24	; 0x06
	TIMER1_CTC_A_init(31250,4);     //prescaler 256 at f 8000000 it will be every second.
    1b02:	82 e1       	ldi	r24, 0x12	; 18
    1b04:	9a e7       	ldi	r25, 0x7A	; 122
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <TIMER1_CTC_A_init>
	INT0_Init(&int0_Conf);     //run in falling edge
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	0e 94 92 07 	call	0xf24	; 0xf24 <INT0_Init>
	INT1_Init(&int1_Conf);     //run in falling edge
    1b14:	ce 01       	movw	r24, r28
    1b16:	03 96       	adiw	r24, 0x03	; 3
    1b18:	0e 94 0f 08 	call	0x101e	; 0x101e <INT1_Init>
	INT2_Init(&int2_Conf);     //run in falling edge
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	05 96       	adiw	r24, 0x05	; 5
    1b20:	0e 94 95 08 	call	0x112a	; 0x112a <INT2_Init>
}
    1b24:	26 96       	adiw	r28, 0x06	; 6
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <callBackTimer1>:

void callBackTimer1(void){
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	Seconds++;
    1b3e:	80 91 73 01 	lds	r24, 0x0173
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	80 93 73 01 	sts	0x0173, r24
	if(Seconds==TIME_COUNT)
    1b48:	80 91 73 01 	lds	r24, 0x0173
    1b4c:	8b 33       	cpi	r24, 0x3B	; 59
    1b4e:	c1 f4       	brne	.+48     	; 0x1b80 <callBackTimer1+0x4a>
	{
		Seconds=0;
    1b50:	10 92 73 01 	sts	0x0173, r1
		Minutes++;
    1b54:	80 91 72 01 	lds	r24, 0x0172
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	80 93 72 01 	sts	0x0172, r24
		if(Minutes==TIME_COUNT){
    1b5e:	80 91 72 01 	lds	r24, 0x0172
    1b62:	8b 33       	cpi	r24, 0x3B	; 59
    1b64:	69 f4       	brne	.+26     	; 0x1b80 <callBackTimer1+0x4a>
			Minutes=0;
    1b66:	10 92 72 01 	sts	0x0172, r1
			Hours++;
    1b6a:	80 91 71 01 	lds	r24, 0x0171
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	80 93 71 01 	sts	0x0171, r24
			if(Hours==24)
    1b74:	80 91 71 01 	lds	r24, 0x0171
    1b78:	88 31       	cpi	r24, 0x18	; 24
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <callBackTimer1+0x4a>
				Hours=0;
    1b7c:	10 92 71 01 	sts	0x0171, r1
		}
	}
	if(g_turn_counter==2    ){   //||g_turn_counter==3
    1b80:	80 91 77 01 	lds	r24, 0x0177
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	c1 f5       	brne	.+112    	; 0x1bf8 <callBackTimer1+0xc2>
		if (counter_S>0)
    1b88:	80 91 76 01 	lds	r24, 0x0176
    1b8c:	88 23       	and	r24, r24
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <callBackTimer1+0x64>
			counter_S--;
    1b90:	80 91 76 01 	lds	r24, 0x0176
    1b94:	81 50       	subi	r24, 0x01	; 1
    1b96:	80 93 76 01 	sts	0x0176, r24

		if(counter_S==0  &&  (counter_M>0||counter_H>0) )
    1b9a:	80 91 76 01 	lds	r24, 0x0176
    1b9e:	88 23       	and	r24, r24
    1ba0:	59 f5       	brne	.+86     	; 0x1bf8 <callBackTimer1+0xc2>
    1ba2:	80 91 75 01 	lds	r24, 0x0175
    1ba6:	88 23       	and	r24, r24
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <callBackTimer1+0x7c>
    1baa:	80 91 74 01 	lds	r24, 0x0174
    1bae:	88 23       	and	r24, r24
    1bb0:	19 f1       	breq	.+70     	; 0x1bf8 <callBackTimer1+0xc2>
		{
			if (counter_M>0){
    1bb2:	80 91 75 01 	lds	r24, 0x0175
    1bb6:	88 23       	and	r24, r24
    1bb8:	41 f0       	breq	.+16     	; 0x1bca <callBackTimer1+0x94>
				counter_S=TIME_COUNT;
    1bba:	8b e3       	ldi	r24, 0x3B	; 59
    1bbc:	80 93 76 01 	sts	0x0176, r24
				counter_M--;
    1bc0:	80 91 75 01 	lds	r24, 0x0175
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	80 93 75 01 	sts	0x0175, r24
			}
			if(counter_M==0 && counter_S==0 && counter_H > 0){
    1bca:	80 91 75 01 	lds	r24, 0x0175
    1bce:	88 23       	and	r24, r24
    1bd0:	99 f4       	brne	.+38     	; 0x1bf8 <callBackTimer1+0xc2>
    1bd2:	80 91 76 01 	lds	r24, 0x0176
    1bd6:	88 23       	and	r24, r24
    1bd8:	79 f4       	brne	.+30     	; 0x1bf8 <callBackTimer1+0xc2>
    1bda:	80 91 74 01 	lds	r24, 0x0174
    1bde:	88 23       	and	r24, r24
    1be0:	59 f0       	breq	.+22     	; 0x1bf8 <callBackTimer1+0xc2>
				counter_M=TIME_COUNT;
    1be2:	8b e3       	ldi	r24, 0x3B	; 59
    1be4:	80 93 75 01 	sts	0x0175, r24
				counter_S=TIME_COUNT;
    1be8:	8b e3       	ldi	r24, 0x3B	; 59
    1bea:	80 93 76 01 	sts	0x0176, r24
				counter_H--;
    1bee:	80 91 74 01 	lds	r24, 0x0174
    1bf2:	81 50       	subi	r24, 0x01	; 1
    1bf4:	80 93 74 01 	sts	0x0174, r24
			}
		}
	}
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <callBackin0>:

void callBackin0(void){
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62

	if(g_turn_counter==0){
    1c06:	80 91 77 01 	lds	r24, 0x0177
    1c0a:	88 23       	and	r24, r24
    1c0c:	59 f4       	brne	.+22     	; 0x1c24 <callBackin0+0x26>
		g_clock_flag++;
    1c0e:	80 91 6f 01 	lds	r24, 0x016F
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	80 93 6f 01 	sts	0x016F, r24
		if (g_clock_flag==4)
    1c18:	80 91 6f 01 	lds	r24, 0x016F
    1c1c:	84 30       	cpi	r24, 0x04	; 4
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <callBackin0+0x26>
			g_clock_flag=0;
    1c20:	10 92 6f 01 	sts	0x016F, r1
	}
	if(g_turn_counter==1){
    1c24:	80 91 77 01 	lds	r24, 0x0177
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	59 f4       	brne	.+22     	; 0x1c42 <callBackin0+0x44>
		g_counter_flag++;
    1c2c:	80 91 70 01 	lds	r24, 0x0170
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	80 93 70 01 	sts	0x0170, r24
		if(g_counter_flag==4)
    1c36:	80 91 70 01 	lds	r24, 0x0170
    1c3a:	84 30       	cpi	r24, 0x04	; 4
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <callBackin0+0x44>
			g_counter_flag=0;
    1c3e:	10 92 70 01 	sts	0x0170, r1
	}
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <callBackin1>:

void callBackin1(void){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62

	if(g_turn_counter==0){
    1c50:	80 91 77 01 	lds	r24, 0x0177
    1c54:	88 23       	and	r24, r24
    1c56:	79 f5       	brne	.+94     	; 0x1cb6 <callBackin1+0x6e>
		if(g_clock_flag==1 ) {
    1c58:	80 91 6f 01 	lds	r24, 0x016F
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	61 f4       	brne	.+24     	; 0x1c78 <callBackin1+0x30>
			Hours++;
    1c60:	80 91 71 01 	lds	r24, 0x0171
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	80 93 71 01 	sts	0x0171, r24
			if(Hours==24)
    1c6a:	80 91 71 01 	lds	r24, 0x0171
    1c6e:	88 31       	cpi	r24, 0x18	; 24
    1c70:	11 f5       	brne	.+68     	; 0x1cb6 <callBackin1+0x6e>
				Hours=0;
    1c72:	10 92 71 01 	sts	0x0171, r1
    1c76:	1f c0       	rjmp	.+62     	; 0x1cb6 <callBackin1+0x6e>
		}
		else if(g_clock_flag==2 ) {
    1c78:	80 91 6f 01 	lds	r24, 0x016F
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	61 f4       	brne	.+24     	; 0x1c98 <callBackin1+0x50>
			Minutes++;
    1c80:	80 91 72 01 	lds	r24, 0x0172
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 93 72 01 	sts	0x0172, r24
			if(Minutes==TIME_COUNT)
    1c8a:	80 91 72 01 	lds	r24, 0x0172
    1c8e:	8b 33       	cpi	r24, 0x3B	; 59
    1c90:	91 f4       	brne	.+36     	; 0x1cb6 <callBackin1+0x6e>
				Minutes=0;
    1c92:	10 92 72 01 	sts	0x0172, r1
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <callBackin1+0x6e>
		}
		else if(g_clock_flag==3 ) {
    1c98:	80 91 6f 01 	lds	r24, 0x016F
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	59 f4       	brne	.+22     	; 0x1cb6 <callBackin1+0x6e>
			Seconds++;
    1ca0:	80 91 73 01 	lds	r24, 0x0173
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 73 01 	sts	0x0173, r24
			if(Seconds==TIME_COUNT)
    1caa:	80 91 73 01 	lds	r24, 0x0173
    1cae:	8b 33       	cpi	r24, 0x3B	; 59
    1cb0:	11 f4       	brne	.+4      	; 0x1cb6 <callBackin1+0x6e>
				Seconds=0;
    1cb2:	10 92 73 01 	sts	0x0173, r1
		}
	}
	////////for counter////////////
	if(g_turn_counter==1){
    1cb6:	80 91 77 01 	lds	r24, 0x0177
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	79 f5       	brne	.+94     	; 0x1d1c <callBackin1+0xd4>
		if((g_counter_flag==1) ) {
    1cbe:	80 91 70 01 	lds	r24, 0x0170
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	61 f4       	brne	.+24     	; 0x1cde <callBackin1+0x96>
			counter_H++;
    1cc6:	80 91 74 01 	lds	r24, 0x0174
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	80 93 74 01 	sts	0x0174, r24
			if(counter_H==24)
    1cd0:	80 91 74 01 	lds	r24, 0x0174
    1cd4:	88 31       	cpi	r24, 0x18	; 24
    1cd6:	11 f5       	brne	.+68     	; 0x1d1c <callBackin1+0xd4>
				counter_H=0;
    1cd8:	10 92 74 01 	sts	0x0174, r1
    1cdc:	1f c0       	rjmp	.+62     	; 0x1d1c <callBackin1+0xd4>
		}
		else if((g_counter_flag==2) ) {
    1cde:	80 91 70 01 	lds	r24, 0x0170
    1ce2:	82 30       	cpi	r24, 0x02	; 2
    1ce4:	61 f4       	brne	.+24     	; 0x1cfe <callBackin1+0xb6>
			counter_M++;
    1ce6:	80 91 75 01 	lds	r24, 0x0175
    1cea:	8f 5f       	subi	r24, 0xFF	; 255
    1cec:	80 93 75 01 	sts	0x0175, r24
			if(counter_M==TIME_COUNT)
    1cf0:	80 91 75 01 	lds	r24, 0x0175
    1cf4:	8b 33       	cpi	r24, 0x3B	; 59
    1cf6:	91 f4       	brne	.+36     	; 0x1d1c <callBackin1+0xd4>
				counter_M=0;
    1cf8:	10 92 75 01 	sts	0x0175, r1
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <callBackin1+0xd4>
		}
		else if((g_counter_flag==3 )) {
    1cfe:	80 91 70 01 	lds	r24, 0x0170
    1d02:	83 30       	cpi	r24, 0x03	; 3
    1d04:	59 f4       	brne	.+22     	; 0x1d1c <callBackin1+0xd4>
			counter_S++;
    1d06:	80 91 76 01 	lds	r24, 0x0176
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	80 93 76 01 	sts	0x0176, r24
			if(counter_S==TIME_COUNT)
    1d10:	80 91 76 01 	lds	r24, 0x0176
    1d14:	8b 33       	cpi	r24, 0x3B	; 59
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <callBackin1+0xd4>
				counter_S=0;
    1d18:	10 92 76 01 	sts	0x0176, r1
		}
	}
}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <callBackin2>:

void callBackin2(void){
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62

	g_turn_counter ++;
    1d2a:	80 91 77 01 	lds	r24, 0x0177
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	80 93 77 01 	sts	0x0177, r24
	if(g_turn_counter==3)
    1d34:	80 91 77 01 	lds	r24, 0x0177
    1d38:	83 30       	cpi	r24, 0x03	; 3
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <callBackin2+0x1e>
		g_turn_counter=0;
    1d3c:	10 92 77 01 	sts	0x0177, r1
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <__vector_9>:
static volatile void (*g_TIMER2_OVF_callBackPtr)(void) = NULL;
static volatile void (*g_TIMER2_CTC_callBackPtr)(void) = NULL;
 */

ISR(TIMER0_OVF_vect)
{
    1d46:	1f 92       	push	r1
    1d48:	0f 92       	push	r0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	0f 92       	push	r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	4f 93       	push	r20
    1d56:	5f 93       	push	r21
    1d58:	6f 93       	push	r22
    1d5a:	7f 93       	push	r23
    1d5c:	8f 93       	push	r24
    1d5e:	9f 93       	push	r25
    1d60:	af 93       	push	r26
    1d62:	bf 93       	push	r27
    1d64:	ef 93       	push	r30
    1d66:	ff 93       	push	r31
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL)
    1d70:	80 91 78 01 	lds	r24, 0x0178
    1d74:	90 91 79 01 	lds	r25, 0x0179
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1d7c:	e0 91 78 01 	lds	r30, 0x0178
    1d80:	f0 91 79 01 	lds	r31, 0x0179
    1d84:	09 95       	icall
	}
}
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	bf 91       	pop	r27
    1d90:	af 91       	pop	r26
    1d92:	9f 91       	pop	r25
    1d94:	8f 91       	pop	r24
    1d96:	7f 91       	pop	r23
    1d98:	6f 91       	pop	r22
    1d9a:	5f 91       	pop	r21
    1d9c:	4f 91       	pop	r20
    1d9e:	3f 91       	pop	r19
    1da0:	2f 91       	pop	r18
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL)
    1dd6:	80 91 78 01 	lds	r24, 0x0178
    1dda:	90 91 79 01 	lds	r25, 0x0179
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	29 f0       	breq	.+10     	; 0x1dec <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1de2:	e0 91 78 01 	lds	r30, 0x0178
    1de6:	f0 91 79 01 	lds	r31, 0x0179
    1dea:	09 95       	icall
	}
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <__vector_6>:
///////////////////////////////////
ISR(TIMER1_COMPA_vect)
{
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	0f 92       	push	r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	ef 93       	push	r30
    1e32:	ff 93       	push	r31
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_CTC_A_callBackPtr != NULL)
    1e3c:	80 91 7c 01 	lds	r24, 0x017C
    1e40:	90 91 7d 01 	lds	r25, 0x017D
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	29 f0       	breq	.+10     	; 0x1e52 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_CTC_A_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e48:	e0 91 7c 01 	lds	r30, 0x017C
    1e4c:	f0 91 7d 01 	lds	r31, 0x017D
    1e50:	09 95       	icall
	}
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <TIMER0_OVF_init>:

void TIMER0_OVF_init( TIMER_ConfigType *Config_Ptr)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <TIMER0_OVF_init+0x6>
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->type == TIMER0_OVF){
    1e86:	e9 81       	ldd	r30, Y+1	; 0x01
    1e88:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8a:	80 81       	ld	r24, Z
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	b1 f4       	brne	.+44     	; 0x1ebc <TIMER0_OVF_init+0x44>
		TCNT0=Config_Ptr->Reg_value;       // init_start;  //initial
    1e90:	a2 e5       	ldi	r26, 0x52	; 82
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e9 81       	ldd	r30, Y+1	; 0x01
    1e96:	fa 81       	ldd	r31, Y+2	; 0x02
    1e98:	81 81       	ldd	r24, Z+1	; 0x01
    1e9a:	92 81       	ldd	r25, Z+2	; 0x02
    1e9c:	8c 93       	st	X, r24

		TCCR0 =(1<<FOC0) | (Config_Ptr->clock);  //clock
    1e9e:	a3 e5       	ldi	r26, 0x53	; 83
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	80 68       	ori	r24, 0x80	; 128
    1eaa:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE0);   //module enable
    1eac:	a9 e5       	ldi	r26, 0x59	; 89
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e9 e5       	ldi	r30, 0x59	; 89
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	8c 93       	st	X, r24
    1eba:	59 c0       	rjmp	.+178    	; 0x1f6e <TIMER0_OVF_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_CTC){
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	c9 f4       	brne	.+50     	; 0x1ef8 <TIMER0_OVF_init+0x80>
		TCNT0=0;                 //initial
    1ec6:	e2 e5       	ldi	r30, 0x52	; 82
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value ;           //compare
    1ecc:	ac e5       	ldi	r26, 0x5C	; 92
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	81 81       	ldd	r24, Z+1	; 0x01
    1ed6:	92 81       	ldd	r25, Z+2	; 0x02
    1ed8:	8c 93       	st	X, r24

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (Config_Ptr->clock);    //clock
    1eda:	a3 e5       	ldi	r26, 0x53	; 83
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	83 81       	ldd	r24, Z+3	; 0x03
    1ee4:	88 68       	ori	r24, 0x88	; 136
    1ee6:	8c 93       	st	X, r24
		TIMSK |=(1<<OCIE0);   //module enable
    1ee8:	a9 e5       	ldi	r26, 0x59	; 89
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e9 e5       	ldi	r30, 0x59	; 89
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	8c 93       	st	X, r24
    1ef6:	3b c0       	rjmp	.+118    	; 0x1f6e <TIMER0_OVF_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_Square_Wave){
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	80 81       	ld	r24, Z
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	c9 f4       	brne	.+50     	; 0x1f34 <TIMER0_OVF_init+0xbc>
		DDRB |= (1<<PB3);      //make pin output
    1f02:	a7 e3       	ldi	r26, 0x37	; 55
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e7 e3       	ldi	r30, 0x37	; 55
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 60       	ori	r24, 0x08	; 8
    1f0e:	8c 93       	st	X, r24
		TCNT0=0;               //initial
    1f10:	e2 e5       	ldi	r30, 0x52	; 82
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value;         //compare
    1f16:	ac e5       	ldi	r26, 0x5C	; 92
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1e:	81 81       	ldd	r24, Z+1	; 0x01
    1f20:	92 81       	ldd	r25, Z+2	; 0x02
    1f22:	8c 93       	st	X, r24

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (Config_Ptr->clock);    //clock
    1f24:	a3 e5       	ldi	r26, 0x53	; 83
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	83 81       	ldd	r24, Z+3	; 0x03
    1f2e:	88 69       	ori	r24, 0x98	; 152
    1f30:	8c 93       	st	X, r24
    1f32:	1d c0       	rjmp	.+58     	; 0x1f6e <TIMER0_OVF_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_Fast_PWM){
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	80 81       	ld	r24, Z
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	c1 f4       	brne	.+48     	; 0x1f6e <TIMER0_OVF_init+0xf6>
		//FOCnPWM= Fclk/ (N * 256)  //N is prescaler
		//so N= Fclk/(FOCnPWM * 256)
		DDRB |= (1<<PB3);      //make pin output
    1f3e:	a7 e3       	ldi	r26, 0x37	; 55
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e7 e3       	ldi	r30, 0x37	; 55
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 60       	ori	r24, 0x08	; 8
    1f4a:	8c 93       	st	X, r24
		TCNT0=0;                 //initial
    1f4c:	e2 e5       	ldi	r30, 0x52	; 82
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value;                    //compare
    1f52:	ac e5       	ldi	r26, 0x5C	; 92
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	81 81       	ldd	r24, Z+1	; 0x01
    1f5c:	92 81       	ldd	r25, Z+2	; 0x02
    1f5e:	8c 93       	st	X, r24

		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (Config_Ptr->clock);    //clock
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e9 81       	ldd	r30, Y+1	; 0x01
    1f66:	fa 81       	ldd	r31, Y+2	; 0x02
    1f68:	83 81       	ldd	r24, Z+3	; 0x03
    1f6a:	88 66       	ori	r24, 0x68	; 104
    1f6c:	8c 93       	st	X, r24
	}
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <TIMER0_CallBack>:

void TIMER0_CallBack(void(*a_ptr)(void))
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <TIMER0_CallBack+0x6>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER0_callBackPtr = a_ptr;
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	90 93 79 01 	sts	0x0179, r25
    1f8e:	80 93 78 01 	sts	0x0178, r24
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <TIMER1_OVF_init>:


/*   timer 1       */

void TIMER1_OVF_init(uint16 init_start, uint8 clk_slect)   //need to modify
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <TIMER1_OVF_init+0x6>
    1fa2:	0f 92       	push	r0
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	6b 83       	std	Y+3, r22	; 0x03
	TIMSK |=(1<<TOIE1);   //module enable
    1fae:	a9 e5       	ldi	r26, 0x59	; 89
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e9 e5       	ldi	r30, 0x59	; 89
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	84 60       	ori	r24, 0x04	; 4
    1fba:	8c 93       	st	X, r24
	TCNT1=init_start;                 //initial
    1fbc:	ec e4       	ldi	r30, 0x4C	; 76
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    1fc8:	ef e4       	ldi	r30, 0x4F	; 79
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	8c e0       	ldi	r24, 0x0C	; 12
    1fce:	80 83       	st	Z, r24
	TCCR1B = (clk_slect);    //clock
    1fd0:	ee e4       	ldi	r30, 0x4E	; 78
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	80 83       	st	Z, r24
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <TIMER1_CTC_A_init>:
void TIMER1_CTC_A_init(uint16 comp_reg, uint8 clk_slect)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <TIMER1_CTC_A_init+0x6>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	6b 83       	std	Y+3, r22	; 0x03
	TIMSK |=(1<<OCIE1A);    //module enable
    1ff6:	a9 e5       	ldi	r26, 0x59	; 89
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e9 e5       	ldi	r30, 0x59	; 89
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	80 61       	ori	r24, 0x10	; 16
    2002:	8c 93       	st	X, r24
	TCNT1=0;                 //initial
    2004:	ec e4       	ldi	r30, 0x4C	; 76
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	11 82       	std	Z+1, r1	; 0x01
    200a:	10 82       	st	Z, r1
	OCR1A=comp_reg;           //compare
    200c:	ea e4       	ldi	r30, 0x4A	; 74
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2018:	ef e4       	ldi	r30, 0x4F	; 79
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	8c e0       	ldi	r24, 0x0C	; 12
    201e:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (clk_slect);    //clock
    2020:	ee e4       	ldi	r30, 0x4E	; 78
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	88 60       	ori	r24, 0x08	; 8
    2028:	80 83       	st	Z, r24
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <TIMER1_OVF_CallBack>:

void TIMER1_OVF_CallBack(void(*a_ptr)(void))
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <TIMER1_OVF_CallBack+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_OVF_callBackPtr = a_ptr;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	90 93 7b 01 	sts	0x017B, r25
    204c:	80 93 7a 01 	sts	0x017A, r24
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TIMER1_CTC_A_CallBack>:

void TIMER1_CTC_A_CallBack(void(*a_ptr)(void))
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <TIMER1_CTC_A_CallBack+0x6>
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_CTC_A_callBackPtr = a_ptr;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	90 93 7d 01 	sts	0x017D, r25
    2070:	80 93 7c 01 	sts	0x017C, r24
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <TIMER1_CTC_Square_Wave_init>:

void TIMER1_CTC_Square_Wave_init(uint16 comp_regA ,uint8 clk_slect)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <TIMER1_CTC_Square_Wave_init+0x6>
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	6b 83       	std	Y+3, r22	; 0x03
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    2090:	a1 e3       	ldi	r26, 0x31	; 49
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e1 e3       	ldi	r30, 0x31	; 49
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	80 62       	ori	r24, 0x20	; 32
    209c:	8c 93       	st	X, r24
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    209e:	ec e4       	ldi	r30, 0x4C	; 76
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	11 82       	std	Z+1, r1	; 0x01
    20a4:	10 82       	st	Z, r1
	OCR1A = comp_regA;      /* Set the compare value at A */
    20a6:	ea e4       	ldi	r30, 0x4A	; 74
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B)| (1<<COM1A0);
    20b2:	ef e4       	ldi	r30, 0x4F	; 79
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8c e4       	ldi	r24, 0x4C	; 76
    20b8:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | clk_slect ;
    20ba:	ee e4       	ldi	r30, 0x4E	; 78
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	88 60       	ori	r24, 0x08	; 8
    20c2:	80 83       	st	Z, r24
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <Timer1_Fast_PWM_n_invert_init>:
// fOCnxPWM= fclk/ (N*(1+top) )
// so (N*(1+top)=fclk/fOCnxPWM
// so top =((fclk/fOCnxPWM)-N)/N
void Timer1_Fast_PWM_n_invert_init(uint16 comp_regA, uint16 top,uint8 clk_slect)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <Timer1_Fast_PWM_n_invert_init+0x6>
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <Timer1_Fast_PWM_n_invert_init+0x8>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	7c 83       	std	Y+4, r23	; 0x04
    20e4:	6b 83       	std	Y+3, r22	; 0x03
    20e6:	4d 83       	std	Y+5, r20	; 0x05
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    20e8:	a1 e3       	ldi	r26, 0x31	; 49
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e1 e3       	ldi	r30, 0x31	; 49
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	80 62       	ori	r24, 0x20	; 32
    20f4:	8c 93       	st	X, r24
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    20f6:	ec e4       	ldi	r30, 0x4C	; 76
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	11 82       	std	Z+1, r1	; 0x01
    20fc:	10 82       	st	Z, r1
	OCR1A = comp_regA;      /* Set the compare value at A */
    20fe:	ea e4       	ldi	r30, 0x4A	; 74
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24

	ICR1 = top;         //2499;	/* Set TOP count for timer1 in ICR1 register */
    210a:	e6 e4       	ldi	r30, 0x46	; 70
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
	 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
	 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
	 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
	 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2116:	ef e4       	ldi	r30, 0x4F	; 79
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	82 e8       	ldi	r24, 0x82	; 130
    211c:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1A
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/64
	 */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | clk_slect ; //(1<<CS10) | (1<<CS11);
    211e:	ee e4       	ldi	r30, 0x4E	; 78
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	88 61       	ori	r24, 0x18	; 24
    2126:	80 83       	st	Z, r24
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <Timer1_Fast_PWM_n_invert_speed>:
void Timer1_Fast_PWM_n_invert_speed(uint16 comp_regA)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <Timer1_Fast_PWM_n_invert_speed+0x6>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = comp_regA;      /* Set the compare value at A */
    2146:	ea e4       	ldi	r30, 0x4A	; 74
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <TIMER_Start>:
////////////////////
void TIMER_Start(uint8 timer_type,uint8 clk_slect){
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <TIMER_Start+0x6>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_type==TIMER0)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	88 23       	and	r24, r24
    216e:	61 f4       	brne	.+24     	; 0x2188 <TIMER_Start+0x2c>
		TCCR0= (TCCR0&0xf8)|(clk_slect&0x07);
    2170:	a3 e5       	ldi	r26, 0x53	; 83
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e3 e5       	ldi	r30, 0x53	; 83
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	98 2f       	mov	r25, r24
    217c:	98 7f       	andi	r25, 0xF8	; 248
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	87 70       	andi	r24, 0x07	; 7
    2182:	89 2b       	or	r24, r25
    2184:	8c 93       	st	X, r24
    2186:	0e c0       	rjmp	.+28     	; 0x21a4 <TIMER_Start+0x48>
	else if(timer_type==TIMER1)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	85 30       	cpi	r24, 0x05	; 5
    218c:	59 f4       	brne	.+22     	; 0x21a4 <TIMER_Start+0x48>
		TCCR1B=(TCCR1B&0xf8)| (clk_slect&0x07);
    218e:	ae e4       	ldi	r26, 0x4E	; 78
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ee e4       	ldi	r30, 0x4E	; 78
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	98 2f       	mov	r25, r24
    219a:	98 7f       	andi	r25, 0xF8	; 248
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	87 70       	andi	r24, 0x07	; 7
    21a0:	89 2b       	or	r24, r25
    21a2:	8c 93       	st	X, r24

}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <TIMER_Stop>:

void TIMER_Stop(uint8 timer_type){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	88 23       	and	r24, r24
    21be:	41 f4       	brne	.+16     	; 0x21d0 <TIMER_Stop+0x22>
		TCCR0&=~0x07;
    21c0:	a3 e5       	ldi	r26, 0x53	; 83
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e3 e5       	ldi	r30, 0x53	; 83
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	88 7f       	andi	r24, 0xF8	; 248
    21cc:	8c 93       	st	X, r24
    21ce:	0a c0       	rjmp	.+20     	; 0x21e4 <TIMER_Stop+0x36>
	else if(timer_type==TIMER1)
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	85 30       	cpi	r24, 0x05	; 5
    21d4:	39 f4       	brne	.+14     	; 0x21e4 <TIMER_Stop+0x36>
		TCCR1B&=~0x07;
    21d6:	ae e4       	ldi	r26, 0x4E	; 78
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	ee e4       	ldi	r30, 0x4E	; 78
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 7f       	andi	r24, 0xF8	; 248
    21e2:	8c 93       	st	X, r24
}
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <TIMER_Clear>:

void TIMER_Clear(uint8 timer_type)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0)
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	88 23       	and	r24, r24
    21fc:	21 f4       	brne	.+8      	; 0x2206 <TIMER_Clear+0x1a>
		TCNT0 = 0;
    21fe:	e2 e5       	ldi	r30, 0x52	; 82
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	10 82       	st	Z, r1
    2204:	07 c0       	rjmp	.+14     	; 0x2214 <TIMER_Clear+0x28>
	else if(timer_type==TIMER1)
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	85 30       	cpi	r24, 0x05	; 5
    220a:	21 f4       	brne	.+8      	; 0x2214 <TIMER_Clear+0x28>
		TCNT1 = 0;
    220c:	ec e4       	ldi	r30, 0x4C	; 76
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	11 82       	std	Z+1, r1	; 0x01
    2212:	10 82       	st	Z, r1
}
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <TIMER_Deinit>:

void TIMER_Deinit(uint8 timer_type)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	0f 92       	push	r0
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0){
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 23       	and	r24, r24
    222c:	89 f4       	brne	.+34     	; 0x2250 <TIMER_Deinit+0x34>
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    222e:	e3 e5       	ldi	r30, 0x53	; 83
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	10 82       	st	Z, r1
		TCNT0 = 0;
    2234:	e2 e5       	ldi	r30, 0x52	; 82
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
		OCR0  = 0;
    223a:	ec e5       	ldi	r30, 0x5C	; 92
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	10 82       	st	Z, r1

		/* Disable timer 0 interrupt */
		TIMSK &= ~((1<<TOIE0)|(1<<OCIE0));
    2240:	a9 e5       	ldi	r26, 0x59	; 89
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e9 e5       	ldi	r30, 0x59	; 89
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8c 7f       	andi	r24, 0xFC	; 252
    224c:	8c 93       	st	X, r24
    224e:	20 c0       	rjmp	.+64     	; 0x2290 <TIMER_Deinit+0x74>
	}

	else if(timer_type==TIMER1){
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	85 30       	cpi	r24, 0x05	; 5
    2254:	e9 f4       	brne	.+58     	; 0x2290 <TIMER_Deinit+0x74>
		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    2256:	ef e4       	ldi	r30, 0x4F	; 79
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	10 82       	st	Z, r1
		TCCR1B = 0;
    225c:	ee e4       	ldi	r30, 0x4E	; 78
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	10 82       	st	Z, r1
		TCNT1 = 0;
    2262:	ec e4       	ldi	r30, 0x4C	; 76
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	11 82       	std	Z+1, r1	; 0x01
    2268:	10 82       	st	Z, r1
		OCR1A = 0 ;
    226a:	ea e4       	ldi	r30, 0x4A	; 74
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	11 82       	std	Z+1, r1	; 0x01
    2270:	10 82       	st	Z, r1
		OCR1B = 0 ;
    2272:	e8 e4       	ldi	r30, 0x48	; 72
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	11 82       	std	Z+1, r1	; 0x01
    2278:	10 82       	st	Z, r1
		ICR1 = 0;
    227a:	e6 e4       	ldi	r30, 0x46	; 70
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	11 82       	std	Z+1, r1	; 0x01
    2280:	10 82       	st	Z, r1

		/* Disable the Input Capture interrupt */
		TIMSK &= ~(1<<TICIE1);
    2282:	a9 e5       	ldi	r26, 0x59	; 89
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e9 e5       	ldi	r30, 0x59	; 89
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 7d       	andi	r24, 0xDF	; 223
    228e:	8c 93       	st	X, r24
	}

}
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <WDT_ON>:
}


#endif
/*w d timer */
void WDT_ON(uint8 WDClk){
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	89 83       	std	Y+1, r24	; 0x01
	WDTCR= (1<<WDE)|(WDClk);
    22a4:	e1 e4       	ldi	r30, 0x41	; 65
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 60       	ori	r24, 0x08	; 8
    22ac:	80 83       	st	Z, r24
}
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <WDT_OFF>:

void WDT_OFF(uint8 four_cycles){
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	69 97       	sbiw	r28, 0x19	; 25
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	89 8f       	std	Y+25, r24	; 0x19
	WDTCR=(1<<WDE)|(1<<WDTOE);
    22cc:	e1 e4       	ldi	r30, 0x41	; 65
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	88 e1       	ldi	r24, 0x18	; 24
    22d2:	80 83       	st	Z, r24
	_delay_us(four_cycles);
    22d4:	89 8d       	ldd	r24, Y+25	; 0x19
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 8b       	std	Y+21, r24	; 0x15
    22ec:	9e 8b       	std	Y+22, r25	; 0x16
    22ee:	af 8b       	std	Y+23, r26	; 0x17
    22f0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	2b ea       	ldi	r18, 0xAB	; 171
    22fc:	3a ea       	ldi	r19, 0xAA	; 170
    22fe:	4a e2       	ldi	r20, 0x2A	; 42
    2300:	50 e4       	ldi	r21, 0x40	; 64
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 8b       	std	Y+17, r24	; 0x11
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	ab 8b       	std	Y+19, r26	; 0x13
    2310:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2312:	69 89       	ldd	r22, Y+17	; 0x11
    2314:	7a 89       	ldd	r23, Y+18	; 0x12
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	1c f4       	brge	.+6      	; 0x2330 <WDT_OFF+0x7a>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	88 8b       	std	Y+16, r24	; 0x10
    232e:	91 c0       	rjmp	.+290    	; 0x2452 <WDT_OFF+0x19c>
	else if (__tmp > 255)
    2330:	69 89       	ldd	r22, Y+17	; 0x11
    2332:	7a 89       	ldd	r23, Y+18	; 0x12
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	53 e4       	ldi	r21, 0x43	; 67
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <WDT_OFF+0x94>
    2348:	7b c0       	rjmp	.+246    	; 0x2440 <WDT_OFF+0x18a>
	{
		_delay_ms(__us / 1000.0);
    234a:	6d 89       	ldd	r22, Y+21	; 0x15
    234c:	7e 89       	ldd	r23, Y+22	; 0x16
    234e:	8f 89       	ldd	r24, Y+23	; 0x17
    2350:	98 8d       	ldd	r25, Y+24	; 0x18
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	54 e4       	ldi	r21, 0x44	; 68
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8c 87       	std	Y+12, r24	; 0x0c
    2364:	9d 87       	std	Y+13, r25	; 0x0d
    2366:	ae 87       	std	Y+14, r26	; 0x0e
    2368:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	6c 85       	ldd	r22, Y+12	; 0x0c
    236c:	7d 85       	ldd	r23, Y+13	; 0x0d
    236e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2370:	9f 85       	ldd	r25, Y+15	; 0x0f
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	88 87       	std	Y+8, r24	; 0x08
    2384:	99 87       	std	Y+9, r25	; 0x09
    2386:	aa 87       	std	Y+10, r26	; 0x0a
    2388:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    238a:	68 85       	ldd	r22, Y+8	; 0x08
    238c:	79 85       	ldd	r23, Y+9	; 0x09
    238e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2390:	9b 85       	ldd	r25, Y+11	; 0x0b
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <WDT_OFF+0xf6>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9f 83       	std	Y+7, r25	; 0x07
    23a8:	8e 83       	std	Y+6, r24	; 0x06
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <WDT_OFF+0x174>
	else if (__tmp > 65535)
    23ac:	68 85       	ldd	r22, Y+8	; 0x08
    23ae:	79 85       	ldd	r23, Y+9	; 0x09
    23b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <WDT_OFF+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <WDT_OFF+0x156>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9d 83       	std	Y+5, r25	; 0x05
    23f4:	8c 83       	std	Y+4, r24	; 0x04
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	9d 81       	ldd	r25, Y+5	; 0x05
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <WDT_OFF+0x144>
    23fe:	9d 83       	std	Y+5, r25	; 0x05
    2400:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8e 81       	ldd	r24, Y+6	; 0x06
    2404:	9f 81       	ldd	r25, Y+7	; 0x07
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9f 83       	std	Y+7, r25	; 0x07
    240a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <WDT_OFF+0x138>
    2414:	24 c0       	rjmp	.+72     	; 0x245e <WDT_OFF+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	68 85       	ldd	r22, Y+8	; 0x08
    2418:	79 85       	ldd	r23, Y+9	; 0x09
    241a:	8a 85       	ldd	r24, Y+10	; 0x0a
    241c:	9b 85       	ldd	r25, Y+11	; 0x0b
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9f 83       	std	Y+7, r25	; 0x07
    2428:	8e 83       	std	Y+6, r24	; 0x06
    242a:	8e 81       	ldd	r24, Y+6	; 0x06
    242c:	9f 81       	ldd	r25, Y+7	; 0x07
    242e:	9b 83       	std	Y+3, r25	; 0x03
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <WDT_OFF+0x180>
    243a:	9b 83       	std	Y+3, r25	; 0x03
    243c:	8a 83       	std	Y+2, r24	; 0x02
    243e:	0f c0       	rjmp	.+30     	; 0x245e <WDT_OFF+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2440:	69 89       	ldd	r22, Y+17	; 0x11
    2442:	7a 89       	ldd	r23, Y+18	; 0x12
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	88 8b       	std	Y+16, r24	; 0x10
    2452:	88 89       	ldd	r24, Y+16	; 0x10
    2454:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	8a 95       	dec	r24
    245a:	f1 f7       	brne	.-4      	; 0x2458 <WDT_OFF+0x1a2>
    245c:	89 83       	std	Y+1, r24	; 0x01
	WDTCR&=~(1<<WDE);
    245e:	a1 e4       	ldi	r26, 0x41	; 65
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e1 e4       	ldi	r30, 0x41	; 65
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	87 7f       	andi	r24, 0xF7	; 247
    246a:	8c 93       	st	X, r24
}
    246c:	69 96       	adiw	r28, 0x19	; 25
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <__udivmodqi4>:
    247e:	99 1b       	sub	r25, r25
    2480:	79 e0       	ldi	r23, 0x09	; 9
    2482:	04 c0       	rjmp	.+8      	; 0x248c <__udivmodqi4_ep>

00002484 <__udivmodqi4_loop>:
    2484:	99 1f       	adc	r25, r25
    2486:	96 17       	cp	r25, r22
    2488:	08 f0       	brcs	.+2      	; 0x248c <__udivmodqi4_ep>
    248a:	96 1b       	sub	r25, r22

0000248c <__udivmodqi4_ep>:
    248c:	88 1f       	adc	r24, r24
    248e:	7a 95       	dec	r23
    2490:	c9 f7       	brne	.-14     	; 0x2484 <__udivmodqi4_loop>
    2492:	80 95       	com	r24
    2494:	08 95       	ret

00002496 <__prologue_saves__>:
    2496:	2f 92       	push	r2
    2498:	3f 92       	push	r3
    249a:	4f 92       	push	r4
    249c:	5f 92       	push	r5
    249e:	6f 92       	push	r6
    24a0:	7f 92       	push	r7
    24a2:	8f 92       	push	r8
    24a4:	9f 92       	push	r9
    24a6:	af 92       	push	r10
    24a8:	bf 92       	push	r11
    24aa:	cf 92       	push	r12
    24ac:	df 92       	push	r13
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	ca 1b       	sub	r28, r26
    24c0:	db 0b       	sbc	r29, r27
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	09 94       	ijmp

000024ce <__epilogue_restores__>:
    24ce:	2a 88       	ldd	r2, Y+18	; 0x12
    24d0:	39 88       	ldd	r3, Y+17	; 0x11
    24d2:	48 88       	ldd	r4, Y+16	; 0x10
    24d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24da:	8c 84       	ldd	r8, Y+12	; 0x0c
    24dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    24de:	aa 84       	ldd	r10, Y+10	; 0x0a
    24e0:	b9 84       	ldd	r11, Y+9	; 0x09
    24e2:	c8 84       	ldd	r12, Y+8	; 0x08
    24e4:	df 80       	ldd	r13, Y+7	; 0x07
    24e6:	ee 80       	ldd	r14, Y+6	; 0x06
    24e8:	fd 80       	ldd	r15, Y+5	; 0x05
    24ea:	0c 81       	ldd	r16, Y+4	; 0x04
    24ec:	1b 81       	ldd	r17, Y+3	; 0x03
    24ee:	aa 81       	ldd	r26, Y+2	; 0x02
    24f0:	b9 81       	ldd	r27, Y+1	; 0x01
    24f2:	ce 0f       	add	r28, r30
    24f4:	d1 1d       	adc	r29, r1
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	ed 01       	movw	r28, r26
    2502:	08 95       	ret

00002504 <_exit>:
    2504:	f8 94       	cli

00002506 <__stop_program>:
    2506:	ff cf       	rjmp	.-2      	; 0x2506 <__stop_program>
